{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "text_classification_with_rnn.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ProVuUrnvGrP",
        "outputId": "287f6f1e-0822-46b4-9486-6b8d536abb2e"
      },
      "source": [
        "!pip install tensorflow-datasets\r\n",
        "\r\n",
        "import numpy as np \r\n",
        "import tensorflow_datasets as tfds\r\n",
        "import tensorflow as tf\r\n",
        "tfds.disable_progress_bar()\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "#fuction for plotting graphs\r\n",
        "def plot_graphs(history, metric):\r\n",
        "  plt.plot(history.history[metric])\r\n",
        "  plt.plot(history.history['val_'+metric], '')\r\n",
        "  plt.xlabel(\"Epochs\")\r\n",
        "  plt.ylabel(metric)\r\n",
        "  plt.legend([metric, 'val_'+metric])\r\n",
        "\r\n",
        "#the imdb dataset will be used for binary text classification \r\n",
        "dataset, info = tfds.load('imdb_reviews',\r\n",
        "                          with_info=True, \r\n",
        "                          as_supervised=True)\r\n",
        "train_dataset, test_dataset = dataset['train'], dataset['test']\r\n",
        "train_dataset.element_spec"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: tensorflow-datasets in /usr/local/lib/python3.6/dist-packages (4.0.1)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (0.16.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (1.15.0)\n",
            "Requirement already satisfied: termcolor in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (1.1.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (4.41.1)\n",
            "Requirement already satisfied: dataclasses; python_version < \"3.7\" in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (0.8)\n",
            "Requirement already satisfied: importlib-resources; python_version < \"3.9\" in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (5.1.0)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (2.23.0)\n",
            "Requirement already satisfied: dm-tree in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (0.1.5)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (1.19.5)\n",
            "Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (3.12.4)\n",
            "Requirement already satisfied: absl-py in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (0.10.0)\n",
            "Requirement already satisfied: attrs>=18.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (20.3.0)\n",
            "Requirement already satisfied: promise in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (2.3)\n",
            "Requirement already satisfied: dill in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (0.3.3)\n",
            "Requirement already satisfied: tensorflow-metadata in /usr/local/lib/python3.6/dist-packages (from tensorflow-datasets) (0.27.0)\n",
            "Requirement already satisfied: zipp>=0.4; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from importlib-resources; python_version < \"3.9\"->tensorflow-datasets) (3.4.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.19.0->tensorflow-datasets) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.19.0->tensorflow-datasets) (2020.12.5)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.19.0->tensorflow-datasets) (3.0.4)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.19.0->tensorflow-datasets) (1.24.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.6.1->tensorflow-datasets) (53.0.0)\n",
            "Requirement already satisfied: googleapis-common-protos<2,>=1.52.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-metadata->tensorflow-datasets) (1.52.0)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(TensorSpec(shape=(), dtype=tf.string, name=None),\n",
              " TensorSpec(shape=(), dtype=tf.int64, name=None))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sOLVQgKv3KbS",
        "outputId": "7f5c9277-72c4-4abd-febb-3af72d3117ad"
      },
      "source": [
        "for example, label in train_dataset.take(1):\r\n",
        "  print('text: ', example.numpy())\r\n",
        "  print('label: ', label.numpy())\r\n",
        "\r\n",
        "#Shuffling data serves the purpose of reducing variance and making sure that models remain general and overfit less.\r\n",
        "BUFFER_SIZE = 10000\r\n",
        "BATCH_SIZE = 64\r\n",
        "train_dataset = train_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)\r\n",
        "test_dataset = test_dataset.batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)\r\n",
        "\r\n",
        "for example, label in train_dataset.take(1):\r\n",
        "  print('texts: ', example.numpy()[:3])\r\n",
        "  print()\r\n",
        "  print('labels: ', label.numpy()[:3])\r\n",
        "\r\n",
        "#create the text encoder, by using TextVectorization layer\r\n",
        "VOCAB_SIZE=1000\r\n",
        "encoder = tf.keras.layers.experimental.preprocessing.TextVectorization(\r\n",
        "    max_tokens=VOCAB_SIZE)\r\n",
        "encoder.adapt(train_dataset.map(lambda text, label: text))\r\n",
        "\r\n",
        "#adapt method sets the layer's vocabulary\r\n",
        "vocab = np.array(encoder.get_vocabulary())\r\n",
        "vocab[:20]\r\n",
        "#when the vocabulary is set, the layer can encode text into indices\r\n",
        "encoded_example = encoder(example)[:3].numpy()\r\n",
        "encoded_example\r\n",
        "\r\n",
        "#due to default settings encoding process is not completely reversible\r\n",
        "for n in range(3):\r\n",
        "  print(\"Original: \", example[n].numpy())\r\n",
        "  print(\"Round-trip: \", \" \".join(vocab[encoded_example[n]]))\r\n",
        "  print()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "text:  b\"This was an absolutely terrible movie. Don't be lured in by Christopher Walken or Michael Ironside. Both are great actors, but this must simply be their worst role in history. Even their great acting could not redeem this movie's ridiculous storyline. This movie is an early nineties US propaganda piece. The most pathetic scenes were those when the Columbian rebels were making their cases for revolutions. Maria Conchita Alonso appeared phony, and her pseudo-love affair with Walken was nothing but a pathetic emotional plug in a movie that was devoid of any real meaning. I am disappointed that there are movies like this, ruining actor's like Christopher Walken's good name. I could barely sit through it.\"\n",
            "label:  0\n",
            "texts:  [b\"I have to say as being a fan of the man who created Halloween/The Fog/Christine/The Thing - probably his best films.<br /><br />Then you got this POS. I can't logically think he put any effort at all into this like he did with Cigarette Burns. At least his son made a decent soundtrack.<br /><br />You have to look at this from the standpoint that it didn't seem like a movie. It looked as if someone else directed it for one thing. I won't believe Carpenter put any effort into this at all.<br /><br />I was just listening to his old school H2/H3/The Fog soundtrack and it was awesome, especially for the times.<br /><br />He was using a style that no one had and it worked so well for his films.\"\n",
            " b\"This 1977 cult movie has two crazed lesbians (Sandra Locke & Colleen Camp) appearing at the home of wealthy socialite Doctor George Manning (Seymour Cassel), in hope of help in locating a residence they can't seem to find. But these two have other plans in mind, when they find out George's wife is out of town, they end up taking control of the residence, tying up the George, killing a delivery boy while destroying the place all in one evening. Bizarre and disturbing movie, but the two get there just reward in the same bizarre way as the movie ends. Most will either dislike it right off or get caught up in this ludicrous movie after about 30 minutes into it. Either way some even consider this a cult classic.<br /><br />Larry Dodson\"\n",
            " b'I am an avid fan of violent exploitation cinema, who would never attack a film for being violent or disturbing. I consider \"Cannibal Holocaust\" a masterpiece and will always defend controversial films like \"Day Of The Woman\" or \"Last House on the Left\" as genuine classics. Anyone who browses through my other user comments will notice that I am actually very pro-violence/gore when it comes to films. However, I do think that there should be at least some point to the violence. This piece of crap doesn\\'t have any point whatsoever. The first film in the notorious \"Guinea Pig\" series, \"The Devil\\'s Experiment\" (1985) is widely controversial, but, as opposed to many other controversial films, this stinker has nothing at all to be recommended for. I must say that, before seeing any of the Guniea-Pig films, I already had a feeling that I would hate this one, knowing what it was about. Due to its status as one of the most controversial films around, however, I decided I had to see it. I am very glad I didn\\'t waste any money on this pile of crap, and I sure wish I hadn\\'t wasted my time with it either.<br /><br />This thing\\'s story (I don\\'t even want to call it a \\'film\\'): It doesn\\'t have one. Three scumbags torture a woman to death for some excruciating 40 minutes. That\\'s it. There is no artistic value, no \\'shocking\\' story, no suspense; nothing. Simply the disbelief that a film that shows NOTHING except for a woman being tortured for no reason enjoys an enormous cult-following. It IS disturbing, I give it that. Of course it is disturbing to watch a torture video for 40 minutes. What is more disturbing, however, is the fact that many people actually seem to regard this pile of garbage as some kind of masterpiece. I really cannot figure why. The fact that the gore effects look realistic cannot be the reason, I hope. The girl who plays the victim isn\\'t a very good actor, and reacts very calm to all the torture. That makes the film look less realistic, which is, in this single case, a good thing. This is a film that is sickening; not for its gore, but for its redundancy, its existence for the sole purpose of showing 40 minutes of torture.<br /><br />I strongly oppose any form of censorship. Since this is 100% fake and nobody got hurt during its production, it IS legitimate to make such a film. However, I cannot think of a single reason why anyone would like this, other than the morbid desire to watch suffering and the enjoyment of torture. This film\\'s sequel \"Flowers of Flesh and Blood\" gained notoriety when actor Charlie Sheen mistook it for an actual snuff film and informed the FBI. Fortuneately, the film turned out to be fake. Overall, \"The Devil\\'s Experiment\" is a fake torture/snuff film that seems to have the sole purpose of looking as close to a real snuff film as possible.<br /><br />\"The Devil\\'s Experiment\" is one of the worst films I have ever had the misfortune of sitting through. Don\\'t torture yourself by giving this piece of crap a try for its controversial status. Do yourself a favor and avoid it. Zero stars out of 10, I wish there was a negative scale in order to appropriately rate this pile of crap.']\n",
            "\n",
            "labels:  [0 0 0]\n",
            "Original:  b\"I have to say as being a fan of the man who created Halloween/The Fog/Christine/The Thing - probably his best films.<br /><br />Then you got this POS. I can't logically think he put any effort at all into this like he did with Cigarette Burns. At least his son made a decent soundtrack.<br /><br />You have to look at this from the standpoint that it didn't seem like a movie. It looked as if someone else directed it for one thing. I won't believe Carpenter put any effort into this at all.<br /><br />I was just listening to his old school H2/H3/The Fog soundtrack and it was awesome, especially for the times.<br /><br />He was using a style that no one had and it worked so well for his films.\"\n",
            "Round-trip:  i have to say as being a fan of the man who [UNK] [UNK] [UNK] thing probably his best [UNK] br then you got this [UNK] i cant [UNK] think he put any effort at all into this like he did with [UNK] [UNK] at least his son made a decent [UNK] br you have to look at this from the [UNK] that it didnt seem like a movie it looked as if someone else directed it for one thing i wont believe [UNK] put any effort into this at [UNK] br i was just [UNK] to his old school [UNK] [UNK] soundtrack and it was [UNK] especially for the [UNK] br he was using a style that no one had and it worked so well for his filmsn",
            "\n",
            "Original:  b\"This 1977 cult movie has two crazed lesbians (Sandra Locke & Colleen Camp) appearing at the home of wealthy socialite Doctor George Manning (Seymour Cassel), in hope of help in locating a residence they can't seem to find. But these two have other plans in mind, when they find out George's wife is out of town, they end up taking control of the residence, tying up the George, killing a delivery boy while destroying the place all in one evening. Bizarre and disturbing movie, but the two get there just reward in the same bizarre way as the movie ends. Most will either dislike it right off or get caught up in this ludicrous movie after about 30 minutes into it. Either way some even consider this a cult classic.<br /><br />Larry Dodson\"\n",
            "Round-trip:  this [UNK] [UNK] movie has two [UNK] [UNK] [UNK] [UNK] [UNK] [UNK] [UNK] at the home of [UNK] [UNK] [UNK] george [UNK] [UNK] [UNK] in hope of help in [UNK] a [UNK] they cant seem to find but these two have other [UNK] in mind when they find out [UNK] wife is out of town they end up taking [UNK] of the [UNK] [UNK] up the george killing a [UNK] boy while [UNK] the place all in one [UNK] [UNK] and [UNK] movie but the two get there just [UNK] in the same [UNK] way as the movie ends most will either [UNK] it right off or get [UNK] up in this [UNK] movie after about [UNK] minutes into it either way some even [UNK] this a [UNK] [UNK] brn",
            "\n",
            "Original:  b'I am an avid fan of violent exploitation cinema, who would never attack a film for being violent or disturbing. I consider \"Cannibal Holocaust\" a masterpiece and will always defend controversial films like \"Day Of The Woman\" or \"Last House on the Left\" as genuine classics. Anyone who browses through my other user comments will notice that I am actually very pro-violence/gore when it comes to films. However, I do think that there should be at least some point to the violence. This piece of crap doesn\\'t have any point whatsoever. The first film in the notorious \"Guinea Pig\" series, \"The Devil\\'s Experiment\" (1985) is widely controversial, but, as opposed to many other controversial films, this stinker has nothing at all to be recommended for. I must say that, before seeing any of the Guniea-Pig films, I already had a feeling that I would hate this one, knowing what it was about. Due to its status as one of the most controversial films around, however, I decided I had to see it. I am very glad I didn\\'t waste any money on this pile of crap, and I sure wish I hadn\\'t wasted my time with it either.<br /><br />This thing\\'s story (I don\\'t even want to call it a \\'film\\'): It doesn\\'t have one. Three scumbags torture a woman to death for some excruciating 40 minutes. That\\'s it. There is no artistic value, no \\'shocking\\' story, no suspense; nothing. Simply the disbelief that a film that shows NOTHING except for a woman being tortured for no reason enjoys an enormous cult-following. It IS disturbing, I give it that. Of course it is disturbing to watch a torture video for 40 minutes. What is more disturbing, however, is the fact that many people actually seem to regard this pile of garbage as some kind of masterpiece. I really cannot figure why. The fact that the gore effects look realistic cannot be the reason, I hope. The girl who plays the victim isn\\'t a very good actor, and reacts very calm to all the torture. That makes the film look less realistic, which is, in this single case, a good thing. This is a film that is sickening; not for its gore, but for its redundancy, its existence for the sole purpose of showing 40 minutes of torture.<br /><br />I strongly oppose any form of censorship. Since this is 100% fake and nobody got hurt during its production, it IS legitimate to make such a film. However, I cannot think of a single reason why anyone would like this, other than the morbid desire to watch suffering and the enjoyment of torture. This film\\'s sequel \"Flowers of Flesh and Blood\" gained notoriety when actor Charlie Sheen mistook it for an actual snuff film and informed the FBI. Fortuneately, the film turned out to be fake. Overall, \"The Devil\\'s Experiment\" is a fake torture/snuff film that seems to have the sole purpose of looking as close to a real snuff film as possible.<br /><br />\"The Devil\\'s Experiment\" is one of the worst films I have ever had the misfortune of sitting through. Don\\'t torture yourself by giving this piece of crap a try for its controversial status. Do yourself a favor and avoid it. Zero stars out of 10, I wish there was a negative scale in order to appropriately rate this pile of crap.'\n",
            "Round-trip:  i am an [UNK] fan of [UNK] [UNK] cinema who would never [UNK] a film for being [UNK] or [UNK] i [UNK] [UNK] [UNK] a [UNK] and will always [UNK] [UNK] films like day of the woman or last house on the left as [UNK] [UNK] anyone who [UNK] through my other [UNK] comments will [UNK] that i am actually very [UNK] when it comes to films however i do think that there should be at least some point to the violence this piece of crap doesnt have any point [UNK] the first film in the [UNK] [UNK] [UNK] series the [UNK] [UNK] [UNK] is [UNK] [UNK] but as [UNK] to many other [UNK] films this [UNK] has nothing at all to be [UNK] for i must say that before seeing any of the [UNK] films i already had a feeling that i would hate this one [UNK] what it was about due to its [UNK] as one of the most [UNK] films around however i decided i had to see it i am very [UNK] i didnt waste any money on this [UNK] of crap and i sure wish i [UNK] [UNK] my time with it [UNK] br this things story i dont even want to call it a film it doesnt have one three [UNK] [UNK] a woman to death for some [UNK] [UNK] minutes thats it there is no [UNK] [UNK] no [UNK] story no suspense nothing simply the [UNK] that a film that shows nothing except for a woman being [UNK] for no reason [UNK] an [UNK] [UNK] it is [UNK] i give it that of course it is [UNK] to watch a [UNK] video for [UNK] minutes what is more [UNK] however is the fact that many people actually seem to [UNK] this [UNK] of [UNK] as some kind of [UNK] i really cannot figure why the fact that the gore effects look realistic cannot be the reason i hope the girl who plays the [UNK] isnt a very good actor and [UNK] very [UNK] to all the [UNK] that makes the film look less realistic which is in this single case a good thing this is a film that is [UNK] not for its gore but for its [UNK] its [UNK] for the [UNK] [UNK] of showing [UNK] minutes of [UNK] br i [UNK] [UNK] any form of [UNK] since this is [UNK] [UNK] and [UNK] got [UNK] during its production it is [UNK] to make such a film however i cannot think of a single reason why anyone would like this other than the [UNK] [UNK] to watch [UNK] and the [UNK] of [UNK] this films sequel [UNK] of [UNK] and blood [UNK] [UNK] when actor [UNK] [UNK] [UNK] it for an actual [UNK] film and [UNK] the [UNK] [UNK] the film turned out to be [UNK] overall the [UNK] [UNK] is a [UNK] [UNK] film that seems to have the [UNK] [UNK] of looking as close to a real [UNK] film as [UNK] br the [UNK] [UNK] is one of the worst films i have ever had the [UNK] of [UNK] through dont [UNK] yourself by giving this piece of crap a try for its [UNK] [UNK] do yourself a [UNK] and avoid it [UNK] stars out of 10 i wish there was a [UNK] [UNK] in order to [UNK] [UNK] this [UNK] of crap                                                                                                                                                                                                                                                                                                                                \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JeJZJbk6c0X7",
        "outputId": "b40f4052-d5fa-49f8-cf5c-fd8d9db85052"
      },
      "source": [
        "#create the  model \r\n",
        "#in bidirectional RNN the signal from the beginning of the input doesn't need to be processed all the way through every timestep to affect the output \r\n",
        "#in bidirectional RNN is that you can't efficiently stream predictions as words are being added to the end\r\n",
        "model = tf.keras.Sequential([\r\n",
        "    encoder,\r\n",
        "    tf.keras.layers.Embedding(\r\n",
        "        input_dim=len(encoder.get_vocabulary()),\r\n",
        "        output_dim=64,\r\n",
        "        #masking is used to handle variable sequence length\r\n",
        "        mask_zero=True),\r\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\r\n",
        "    tf.keras.layers.Dense(64, activation='relu'),\r\n",
        "    tf.keras.layers.Dense(1)                   \r\n",
        "])\r\n",
        "# print([layer.supports_masking for layer in model.layers])\r\n",
        "\r\n",
        "sample_text = ('The movie was ok. The animation and the graphics '\r\n",
        "               'were out of this world. I suppose I would recommend this movie.')\r\n",
        "\r\n",
        "#to check if the state was preserved\r\n",
        "#predict on the sample text without padding\r\n",
        "predictions = model.predict(np.array([sample_text]))\r\n",
        "print(predictions[0])\r\n",
        "# predict on a sample text with padding\r\n",
        "padding = \"the \" * 2000\r\n",
        "predictions = model.predict(np.array([sample_text, padding]))\r\n",
        "print(predictions[0])\r\n",
        "\r\n",
        "model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\r\n",
        "              optimizer=tf.keras.optimizers.Adam(1e-4),\r\n",
        "              metrics=['accuracy'])\r\n",
        "\r\n",
        "history = model.fit(train_dataset,\r\n",
        "                    epochs=10,\r\n",
        "                    validation_data=test_dataset,\r\n",
        "                    validation_steps=30)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.01159906]\n",
            "[0.01159906]\n",
            "Epoch 1/10\n",
            "391/391 [==============================] - 38s 80ms/step - loss: 0.6863 - accuracy: 0.5130 - val_loss: 0.5193 - val_accuracy: 0.7245\n",
            "Epoch 2/10\n",
            "391/391 [==============================] - 30s 75ms/step - loss: 0.4555 - accuracy: 0.7928 - val_loss: 0.3705 - val_accuracy: 0.8214\n",
            "Epoch 3/10\n",
            "391/391 [==============================] - 29s 74ms/step - loss: 0.3478 - accuracy: 0.8454 - val_loss: 0.3519 - val_accuracy: 0.8286\n",
            "Epoch 4/10\n",
            "391/391 [==============================] - 30s 74ms/step - loss: 0.3193 - accuracy: 0.8593 - val_loss: 0.3326 - val_accuracy: 0.8531\n",
            "Epoch 5/10\n",
            "391/391 [==============================] - 29s 73ms/step - loss: 0.3068 - accuracy: 0.8683 - val_loss: 0.3297 - val_accuracy: 0.8557\n",
            "Epoch 6/10\n",
            "391/391 [==============================] - 29s 74ms/step - loss: 0.3094 - accuracy: 0.8664 - val_loss: 0.3440 - val_accuracy: 0.8599\n",
            "Epoch 7/10\n",
            "391/391 [==============================] - 29s 74ms/step - loss: 0.3051 - accuracy: 0.8680 - val_loss: 0.3336 - val_accuracy: 0.8490\n",
            "Epoch 8/10\n",
            "391/391 [==============================] - 29s 74ms/step - loss: 0.3109 - accuracy: 0.8673 - val_loss: 0.3213 - val_accuracy: 0.8578\n",
            "Epoch 9/10\n",
            "391/391 [==============================] - 29s 74ms/step - loss: 0.3037 - accuracy: 0.8687 - val_loss: 0.3216 - val_accuracy: 0.8521\n",
            "Epoch 10/10\n",
            "391/391 [==============================] - 29s 74ms/step - loss: 0.2970 - accuracy: 0.8760 - val_loss: 0.3207 - val_accuracy: 0.8568\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CmOHbYrghDVu",
        "outputId": "f870e5dd-226f-4649-c46d-665b5f7b5b47"
      },
      "source": [
        "test_loss, test_acc = model.evaluate(test_dataset)\r\n",
        "print('Test loss: {}'.format(test_loss))\r\n",
        "print('Test accuracy: {}'.format(test_acc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "391/391 [==============================] - 14s 35ms/step - loss: 0.3155 - accuracy: 0.8608\n",
            "Test loss: 0.3155393898487091\n",
            "Test accuracy: 0.8608400225639343\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 358
        },
        "id": "Tr2rTCB2pQ7h",
        "outputId": "6af08169-723b-4c74-9340-abbf112a04a2"
      },
      "source": [
        "plt.figure(figsize=(16,8))\r\n",
        "plt.subplot(1,2,1)\r\n",
        "plot_graphs(history, 'accuracy')\r\n",
        "plt.ylim(None,1)\r\n",
        "plt.subplot(1,2,2)\r\n",
        "plot_graphs(history, 'loss')\r\n",
        "plt.ylim(0,None)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.0, 0.6718754872679711)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2MBxHC1GqbPH",
        "outputId": "d210038d-848b-439f-e770-114980d23aa8"
      },
      "source": [
        "sample_text = ('The movie was acceptable. The animation and the graphics '\r\n",
        "               'were accaptable as well. I suppose I would rather prefer avoid recommending this movie.')\r\n",
        "predictions = model.predict(np.array([sample_text]))\r\n",
        "print(predictions[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-1.2031047]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xoxmm5fitOzh",
        "outputId": "c5fd0855-c7bf-4821-a252-fcf07253b79c"
      },
      "source": [
        "#stack of bidirectional LSTM layers \r\n",
        "model = tf.keras.Sequential([\r\n",
        "    encoder,\r\n",
        "    tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 64, mask_zero=True),\r\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True)),\r\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\r\n",
        "    tf.keras.layers.Dense(64, activation='relu'),\r\n",
        "    tf.keras.layers.Dropout(0.5),\r\n",
        "    tf.keras.layers.Dense(1)\r\n",
        "])\r\n",
        "\r\n",
        "model.compile(loss=tf.losses.BinaryCrossentropy(from_logits=True),\r\n",
        "              optimizer=tf.optimizers.Adam(1e-4),\r\n",
        "              metrics=['accuracy'])\r\n",
        "\r\n",
        "model.fit(train_dataset,\r\n",
        "          epochs=10,\r\n",
        "          validation_data=test_dataset,\r\n",
        "          validation_steps=30)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "391/391 [==============================] - 70s 140ms/step - loss: 0.6802 - accuracy: 0.5166 - val_loss: 0.4224 - val_accuracy: 0.8188\n",
            "Epoch 2/10\n",
            "391/391 [==============================] - 51s 130ms/step - loss: 0.4064 - accuracy: 0.8232 - val_loss: 0.3473 - val_accuracy: 0.8458\n",
            "Epoch 3/10\n",
            "391/391 [==============================] - 51s 129ms/step - loss: 0.3367 - accuracy: 0.8578 - val_loss: 0.3620 - val_accuracy: 0.8500\n",
            "Epoch 4/10\n",
            "391/391 [==============================] - 51s 130ms/step - loss: 0.3268 - accuracy: 0.8613 - val_loss: 0.3309 - val_accuracy: 0.8521\n",
            "Epoch 5/10\n",
            "391/391 [==============================] - 51s 129ms/step - loss: 0.3127 - accuracy: 0.8680 - val_loss: 0.3257 - val_accuracy: 0.8599\n",
            "Epoch 6/10\n",
            "391/391 [==============================] - 51s 130ms/step - loss: 0.3047 - accuracy: 0.8715 - val_loss: 0.3490 - val_accuracy: 0.8276\n",
            "Epoch 7/10\n",
            "391/391 [==============================] - 51s 129ms/step - loss: 0.3062 - accuracy: 0.8673 - val_loss: 0.3492 - val_accuracy: 0.8583\n",
            "Epoch 8/10\n",
            "391/391 [==============================] - 51s 129ms/step - loss: 0.2983 - accuracy: 0.8745 - val_loss: 0.3179 - val_accuracy: 0.8630\n",
            "Epoch 9/10\n",
            "391/391 [==============================] - 51s 129ms/step - loss: 0.3008 - accuracy: 0.8742 - val_loss: 0.3242 - val_accuracy: 0.8667\n",
            "Epoch 10/10\n",
            "391/391 [==============================] - 51s 128ms/step - loss: 0.2866 - accuracy: 0.8799 - val_loss: 0.3204 - val_accuracy: 0.8438\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fcb52aa0198>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MSUQXIXYxxih",
        "outputId": "142bbdf0-4ad1-4481-ecc6-11a28758f89a"
      },
      "source": [
        "test_loss, test_acc = model.evaluate(test_dataset)\r\n",
        "print('Test loss: {}',format(test_loss))\r\n",
        "print('Test accuracy: {}'.format(test_acc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "391/391 [==============================] - 24s 62ms/step - loss: 0.3189 - accuracy: 0.8478\n",
            "Test loss: {} 0.31886449456214905\n",
            "Test accuracy: 0.8478400111198425\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g6L9YJFsy0iq",
        "outputId": "813c0f0b-7b17-43c0-d17a-5fb0cc6a4fb6"
      },
      "source": [
        "# predict on a sample text without padding.\r\n",
        "sample_text = ('The movie was neither good nor bad. The animation was ok')\r\n",
        "predictions = model.predict(np.array([sample_text]))\r\n",
        "print(predictions)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-0.9328899]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 263
        },
        "id": "BpoUUwsOylwj",
        "outputId": "ca8af8d5-a410-4a3a-98f6-fefb21ccf241"
      },
      "source": [
        "plt.figure(figsize=(16,6))\r\n",
        "plt.subplot(1,2,1)\r\n",
        "plot_graphs(history, 'accuracy')\r\n",
        "plt.subplot(1,2,2)\r\n",
        "plot_graphs(history, 'loss')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}